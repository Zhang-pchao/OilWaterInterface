{
    "model": {
      "type_map":           ["H","C","O"],      
	  "descriptor": {
		"_comment":         "if type = se_a_tpe: canâ€™t apply compression method while using atom type embedding",
        "type":             "se_e2_a",
		"_comment":         "sel: [16 32 32] means maximal number of neighbors = 16H 32O 32N",
		"_comment":         "sel: auto:1.1 means automatically counts maximal number of neighbors*1.1",
        "sel":              "auto:1.1",
        "rcut_smth":        0.5,
        "rcut":             6.0,
        "neuron":           [25,50,100],
		"activation_function": "tanh",
        "resnet_dt":        false,
		"_comment":         "axis_neuron: Size of the submatrix of G (embedding matrix)",
        "axis_neuron":      16,
		"seed":             20230908,
	    "_comment":		    "descriptor that's all--------------------------------------------------------------"		
      },
      "fitting_net": {
		"_comment":         "other types: dipole or polar",
		"type":             "ener",
        "neuron":           [240,240,240],
		"activation_function": "tanh",
        "resnet_dt":        true,
		"seed":             20230908,
	    "_comment":		    "fitting_net that's all-------------------------------------------------------------"		
      },  
    "_comment": " model that's all------------------------------------------------------------------------------"
    },

    "loss": {
		"_comment": "loss = pref_e * loss_e + pref_f * loss_f + pref_v * loss_v",
		"_comment": "pref_f(t) = start_pref_f * ( lr(t) / start_lr ) + limit_pref_f * ( 1 - lr(t) / start_lr )",
        "start_pref_e":      0.02,
        "limit_pref_e":      1.0,
        "start_pref_f":      1000,
        "limit_pref_f":      1.0,
        "start_pref_v":      0.0,
        "limit_pref_v":      0.0,
	    "_comment": " loss that's all-----------------------------------------------------------------------------"
    },

    "learning_rate": {
		"_comment": "lr(t) = start_lr * decay_rate ^ ( training step / decay_steps )",
		"_comment": "decay_rate and decay_steps are automatically determined by start_lr, stop_lr and training step)",
        "type":              "exp",
		"_comment": "When parallel training or batch size scaled, how to alter learning rate. Valid values are linear`(default), `sqrt or none.",
		"_scale_by_worker":   "sqrt",
        "start_lr":          1e-03,
	"stop_lr":               1e-08,
	    "_comment": " learning_rate that's all--------------------------------------------------------------------"
    },

    "training": {
        "numb_steps":        10000000,
	"seed":                  20230908,
        "disp_file":         "lcurve.out",
        "disp_freq":         1000,
        "numb_test":         10,
        "save_freq":         10000,
        "save_ckpt":         "model.ckpt",
        "disp_training":     true,
        "time_training":     true,
        "profiling":         false,
        "profiling_file":    "timeline.json",
	"training_data": {
	    "systems":		 [
"/dp_dataset/deepks/water_ion/58h2o/025_train",
"/dp_dataset/deepks/water_ion/58h2o/concat_train",
"/dp_dataset/deepks/water_ion/64h2o/concat_train",
"/dp_dataset/deepks/water_ion/64h2o/scan_axel_train",
"/dp_dataset/cp2k/water_slab/concat_train",

"/dp_dataset/deepks/6c10h22/concat_6oil_train",
"/dp_dataset/deepks/6c10h22/concat_7oil_train",
"/dp_dataset/deepks/4c10h22_22h2o/concat_train",
"/dp_dataset/deepks/2c10h22_44h2o/concat_train",
"/dp_dataset/cp2k/5c10h22_52h2o/dp_dataset_cp2k_1e-7/concat_train"		

		],
	    "batch_size":	"auto",
        "_auto_prob": 	"prob_sys_size; 0:34:0.43; 34:75:0.10; 75:103:0.32; 103:109:0.002; 109:138:0.148",	
	    "_comment": " training_data that's all--------------------------------------------------------------------"
		},
		"_comment": " training that's all-------------------------------------------------------------------------"		
    }
}
